@import './animations';
// Colors
$main-bg: #f8f8f8;
$pinkish-grey: #cecece;
$soft-grey: #979797;
$battleship-grey: #6e6e7e;
$greyish-brown: #4a4a4a;
$darker-grey: #313334;
$black: #282828;
$font-color: #222222;
$lighter-blue: #e0f2fd;
$opaque-blue: #1e7998;
$flat-blue: #316fa0;
$water-blue: #1976D2;
$dark-flat-blue: #1976D2;
$duck-egg-blue: #ecf3fc;
$beige: #F1F8E9;
$mid-green: #43A047;
$amethyst: #9c56b8;
$brick: #c62828;
$dark-red: #c62828;
$pumpkin: #eb6f02;
$yellow-ochre: #DE9A06;

// Dark colors
$dark-brown: #663300;
$dark-deep-blue:#000066;
$dark-green: #254905;
$dark-red: #993300;
$dark-pink: #660066;
$dark-purple:#660099;
$dark-grey: #4c4c4c;
$dark-deep-blue: #006699;
$dark-blue: #0033cc;
$dark-flat-green: #378703;
$dark-flat-red: #cc3300;
$dark-magenta: #990066;
$dark-flat-pink: #c126b8;

// Base colors
$base-blue: #82d4ff;
$base-deep-blue: #0041dc;
$base-green: #5bca13;
$base-yellow: #ffd900;
$base-orange: #ff5000;
$base-pink: #e60895;
$base-magenta: #c126b8;
$base-black: #000000;

// Light colors
$light-turquoise: #66cccc;
$light-green: #9cff5a;
$light-orange: #ffcc33;
$light-pink: #ff66cc;
$light-purple: #cc99ff;
$light-grey: #b2b2b2;
$light-deep-turquoise: #99ffff;
$ligh-blue: #c0e9ff;
$light-lime:#ccffcc;
$light-deep-yellow: #ffff33;
$light-khaki: #cccc99;
$light-deep-pink: #ffccff;

/// rgba-background
/// Generates rgba color for a given property from an hexadecimal color value
/// @param $hexcolor - hexadecimal color value - (#333333)
/// @param $opacity - value from 0 to 1 to set the alpha opacity
/// @param $property - CSS property that will be returned
/// @example
/// @include rgba-color(#333333, 0.5); 
/// ==> will compile into: 
/// background-color: #333333; background-color: rgba(51, 51, 51, 0.5);

@mixin rgba-color ($hexcolor, $opacity, $property: "background-color") {
    #{$property}: $hexcolor;
    #{$property}: rgba($hexcolor, $opacity); 
}

//fonts
$material-icons-font-family: "material-icons-font" !default;
$font-path: "../fonts" !default;
$theme-font-family:'Open Sans', sans-serif;
$theme-font-path:"#{$font-path}/open-sans";

// font size maps
/// At least 2 different breakpoins and sizes should be provided
/// font-map:(breakpoint: size, breakpoint: size)
$h1-font-size-map: (576px: 18px, 992px: 30px);
$h1-line-height-map: (576px: 24px, 992px: 36px);
$h1-icon-font-size-map: (576px:28px, 992px: 40px);
$h2-font-size-map: (576px: 16px, 992px: 20px);
$h2-line-height-map: (576px: 26px, 992px: 30px);
$h3-font-size-map: (576px: 16px, 992px: 18px);
$h3-line-height-map: (576px: 32px, 992px: 36px);
$text-font-size-map: (576px: 14px, 992px: 16px);
$text-line-height-map: (576px: 26px, 992px: 30px);

/// --------------------------------------------------
/// Flexbox SASS @mixins
/// The spec: http://www.w3.org/TR/css3-flexbox
/// --------------------------------------------------

/// Flexbox display
@mixin flexbox() {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}

/// The 'flex' shorthand
/// - applies to: flex items
/// <positive-number>, 
/// @param initial auto, or none
@mixin flex($values) {
  -webkit-box-flex: $values;
     -moz-box-flex: $values;
      -webkit-flex: $values;
  	  -ms-flex: $values;
  	      flex: $values;
}

/// Flex Flow Direction
/// - applies to: flex containers
/// @param row | row-reverse | column | column-reverse
@mixin flex-direction($direction) {
  -webkit-flex-direction: $direction;
     -moz-flex-direction: $direction;
      -ms-flex-direction: $direction;
          flex-direction: $direction;
}

/// Flex Line Wrapping
/// - applies to: flex containers
/// @param nowrap | wrap | wrap-reverse
@mixin flex-wrap($wrap) {
  -webkit-flex-wrap: $wrap;
     -moz-flex-wrap: $wrap;
      -ms-flex-wrap: $wrap;
          flex-wrap: $wrap;
}

/// Flex Direction and Wrap
/// - applies to: flex containers
/// @param <flex-direction> || <flex-wrap>
@mixin flex-flow($flow) {
  -webkit-flex-flow: $flow;
     -moz-flex-flow: $flow;
      -ms-flex-flow: $flow;
          flex-flow: $flow;
}

/// Display Order
/// - applies to: flex items
/// @param <integer>
@mixin order($val) {
  -webkit-box-ordinal-group: $val;  
     -moz-box-ordinal-group: $val;     
  	     -ms-flex-order: $val;     
  	      -webkit-order: $val;  
  		      order: $val;
}

/// Flex grow factor
/// - applies to: flex items
/// @param <number>
@mixin flex-grow($grow) {
  -webkit-flex-grow: $grow;
     -moz-flex-grow: $grow;
      -ms-flex-grow: $grow;
          flex-grow: $grow;
}

/// Flex shrink
/// - applies to: flex item shrink factor
/// @param <number> 
@mixin flex-shrink($shrink) {
  -webkit-flex-shrink: $shrink;
     -moz-flex-shrink: $shrink;
      -ms-flex-shrink: $shrink;
          flex-shrink: $shrink;
}

/// Flex basis
/// - the initial main size of the flex item
/// - applies to: flex itemsnitial main size of the flex item
/// @param <width> 
@mixin flex-basis($width) {
  -webkit-flex-basis: $width;
     -moz-flex-basis: $width;
      -ms-flex-basis: $width;
          flex-basis: $width;
}

/// Axis Alignment
/// - applies to: flex containers
/// @param flex-start | flex-end | center | space-between | space-around 
@mixin justify-content($justify) {
  -webkit-justify-content: $justify;
     -moz-justify-content: $justify;
      -ms-justify-content: $justify;
          justify-content: $justify;
            -ms-flex-pack: $justify;
}

/// Packing Flex Lines
/// - applies to: multi-line flex containers
/// @param flex-start | flex-end | center | space-between | space-around | stretch 
@mixin align-content($align) {
  -webkit-align-content: $align;
     -moz-align-content: $align;
      -ms-align-content: $align;
          align-content: $align;
}

/// Cross-axis Alignment
/// - applies to: flex containers
/// @param flex-start | flex-end | center | baseline | stretch 
@mixin align-items($align) {
  -webkit-align-items: $align;
     -moz-align-items: $align;
      -ms-align-items: $align;
          align-items: $align;
}

/// Cross-axis Alignment
/// - applies to: flex items
/// @param auto | flex-start | flex-end | center | baseline | stretch 
@mixin align-self($align) {
  -webkit-align-self: $align;
     -moz-align-self: $align;
      -ms-align-self: $align;
          align-self: $align;
}

/// fluid-sizing
/// Generate linear interpolated size values through multiple break points
/// @param $property - A string CSS property name
/// @param $map - A SASS map of viewport unit and size value pairs
/// @requires function linear-interpolation
/// @requires function map-sort
/// @example
///   @include fluid-sizing('font-size', (576px: 22px, 768px: 24px, 992px: 34px));

@mixin fluid-sizing($property, $map) {
    // Get the number of provided breakpoints
    $length: length(map-keys($map));
    
    // Error if the number of breakpoints is < 2
    @if ($length < 2) {
      @error "fluid-sizing() $map requires at least values"
    }
  
    // Sort the map by viewport width (key)
    $map: map-sort($map);
    $keys: map-keys($map);
  
    // Minimum size
    #{$property}: map-get($map, nth($keys,1));
    
    // Interpolated size through breakpoints
    @for $i from 1 through ($length - 1) {
      @media (min-width:nth($keys,$i)) {
        #{$property}: linear-interpolation((nth($keys,$i): map-get($map, nth($keys,$i)), nth($keys,($i+1)): map-get($map, nth($keys,($i + 1)))));
      }
    }

    // Maxmimum size
    @media (min-width:nth($keys,$length)) {
      #{$property}: map-get($map, nth($keys,$length));
    }
  }
  
  /// linear-interpolation
  /// Calculate the definition of a line between two points
  /// @param $map - A SASS map of viewport widths and size value pairs
  /// @returns A linear equation as a calc() function
  /// @example
  ///   font-size: linear-interpolation((320px: 18px, 768px: 26px));

  @function linear-interpolation($map) {
    $keys: map-keys($map);
    @if (length($keys) != 2) {
      @error "linear-interpolation() $map must be exactly 2 values";
    }
    // The slope
    $m: (map-get($map, nth($keys, 2)) - map-get($map, nth($keys, 1)))/(nth($keys, 2) - nth($keys,1));
    
    // The y-intercept
    $b: map-get($map, nth($keys, 1)) - $m * nth($keys, 1);
    
    // Determine if the sign should be positive or negative
    $sign: "+";
    @if ($b < 0) {
      $sign: "-";
      $b: abs($b);
    }
    
    @return calc(#{$m*100}vw #{$sign} #{$b});
  }
  
  /// list-sort
  /// Sort a SASS list
  /// @param $list - A SASS list
  /// @returns A sorted SASS list
  /// @requires function list-remove

  @function list-sort($list) {
    $sortedlist: ();
    @while length($list) > 0 {
      $value: nth($list,1);
      @each $item in $list {
        @if $item < $value {
          $value: $item;
        }
      }
      $sortedlist: append($sortedlist, $value, 'space');
      $list: list-remove($list, index($list, $value));
    }
    @return $sortedlist;
  }
  
  /// map-sort
  /// Sort map by keys
  /// @param $map - A SASS map
  /// @returns A SASS map sorted by keys
  /// @requires function list-sort

  @function map-sort($map) {
    $keys: list-sort(map-keys($map));
    $sortedMap: ();
    @each $key in $keys {
      $sortedMap: map-merge($sortedMap, ($key: map-get($map, $key)));
    }
    @return $sortedMap;
  }
  
  /// list-remove
  /// Remove an item from a list
  /// @param $list - A SASS list
  /// @param $index - The list index to remove
  /// @returns A SASS list

  @function list-remove($list, $index) {
    $newList: ();
    @for $i from 1 through length($list) {
      @if $i != $index {
        $newList: append($newList, nth($list,$i), 'space');
      }
    }
    @return $newList;
  }
  
// Checkbox
$checkbox-border-color: rgba(0, 0, 0, 0.25);
$checkbox-border-color-disabled: rgba(0, 0, 0, 0.26);
$checkbox-checked-color-disabled: rgba(0, 0, 0, 0.26);
$checkbox-margin: 16px 0;
$checkbox-size: 20px;
$checkbox-padding: 5px;
$checkbox-border-width: 1px;
$checkbox-border-radius: 2px;
$checkbox-checkmark-width: 2px;
$checkbox-checkmark-color: white;
$checkbox-label-padding: 12px;

// Transitions
@mixin transitions($value: 0.2s, $ease: ease-in-out, $property: all){

	@if $ease == bezier{
		$ease: cubic-bezier(0.86, 0, 0.07, 1)
	}
	-webkit-transition: $property $value $ease;
	-moz-transition: $property $value $ease;
	-o-transition: $property $value $ease;
	transition: $property $value $ease;
}

// Animations 
$countDefault: 1 !default;
$durationDefault: 1s !default;
$delayDefault: 0s !default;
$functionDefault: ease !default;
$fillDefault: both;
$visibilityDefault: hidden !default;
$displayDefault: none !default;

