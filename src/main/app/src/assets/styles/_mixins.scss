
/// rgba-background
/// Generates rgba color for a given property from an hexadecimal color value
/// @param $hexcolor - hexadecimal color value - (#333333)
/// @param $opacity - value from 0 to 1 to set the alpha opacity
/// @param $property - CSS property that will be returned
/// @example
/// @include rgba-color(#333333, 0.5); 
/// ==> will compile into: 
/// background-color: #333333; background-color: rgba(51, 51, 51, 0.5);

@mixin rgba-color ($hexcolor, $opacity, $property: "background-color") {
    #{$property}: $hexcolor;
    #{$property}: rgba($hexcolor, $opacity); 
}

@mixin smoothFonts(){
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/// fluid-sizing
/// Generate linear interpolated size values through multiple break points
/// to smoothly change property values across different devices
/// https://caniuse.com/#search=rem
/// @param $property - A string CSS property name
/// @param $map - A SASS map of viewport unit and size value pairs
/// @requires function linear-interpolation
/// @requires function map-sort
/// @example
///   @include fluid-sizing('font-size', (576px: 22px, 768px: 24px, 992px: 34px));

@mixin fluid-sizing($property, $map) {
    // Get the number of provided breakpoints
    $length: length(map-keys($map));
    
    // Error if the number of breakpoints is < 2
    @if ($length < 2) {
      @error "fluid-sizing() $map requires at least values"
    }
  
    // Sort the map by viewport width (key)
    $map: map-sort($map);
    $keys: map-keys($map);
  
    // Minimum size
    #{$property}: map-get($map, nth($keys,1));
    
    // Interpolated size through breakpoints
    @for $i from 1 through ($length - 1) {
      @media (min-width:nth($keys,$i)) {
        #{$property}: linear-interpolation((nth($keys,$i): map-get($map, nth($keys,$i)), nth($keys,($i+1)): map-get($map, nth($keys,($i + 1)))));
      }
    }

    // Maxmimum size
    @media (min-width:nth($keys,$length)) {
      #{$property}: map-get($map, nth($keys,$length));
    }
  }
  
  /// linear-interpolation
  /// Calculate the definition of a line between two points
  /// @param $map - A SASS map of viewport widths and size value pairs
  /// @returns A linear equation as a calc() function
  /// @example
  ///   font-size: linear-interpolation((320px: 18px, 768px: 26px));
 
  @function linear-interpolation($map) {
    $keys: map-keys($map);
    @if (length($keys) != 2) {
      @error "linear-interpolation() $map must be exactly 2 values";
    }
    // The slope
    $m: (map-get($map, nth($keys, 2)) - map-get($map, nth($keys, 1)))/(nth($keys, 2) - nth($keys,1));
    
    // The y-intercept
    $b: map-get($map, nth($keys, 1)) - $m * nth($keys, 1);
    
    // Determine if the sign should be positive or negative
    $sign: "+";
    @if ($b < 0) {
      $sign: "-";
      $b: abs($b);
    }
    
    @return calc(#{$m*100}vw #{$sign} #{$b});
  }
  
  /// list-sort
  /// Sort a SASS list
  /// @param $list - A SASS list
  /// @returns A sorted SASS list
  /// @requires function list-remove

  @function list-sort($list) {
    $sortedlist: ();
    @while length($list) > 0 {
      $value: nth($list,1);
      @each $item in $list {
        @if $item < $value {
          $value: $item;
        }
      }
      $sortedlist: append($sortedlist, $value, 'space');
      $list: list-remove($list, index($list, $value));
    }
    @return $sortedlist;
  }
  
  /// map-sort
  /// Sort map by keys
  /// @param $map - A SASS map
  /// @returns A SASS map sorted by keys
  /// @requires function list-sort

  @function map-sort($map) {
    $keys: list-sort(map-keys($map));
    $sortedMap: ();
    @each $key in $keys {
      $sortedMap: map-merge($sortedMap, ($key: map-get($map, $key)));
    }
    @return $sortedMap;
  }
  
  /// list-remove
  /// Remove an item from a list
  /// @param $list - A SASS list
  /// @param $index - The list index to remove
  /// @returns A SASS list

  @function list-remove($list, $index) {
    $newList: ();
    @for $i from 1 through length($list) {
      @if $i != $index {
        $newList: append($newList, nth($list,$i), 'space');
      }
    }
    @return $newList;
  }
  
/// Border radius
@mixin border-radius($radius) {
	-webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  border-radius: $radius;
}

/// --------------------------------------------------
/// Flexbox SASS @mixins
/// The spec: http://www.w3.org/TR/css3-flexbox
/// https://caniuse.com/#feat=flexbox
/// --------------------------------------------------

/// Flexbox display
@mixin flexbox() {
  display: -webkit-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}

/// The 'flex' shorthand
/// - applies to: flex items
/// <positive-number>, 
/// @param initial auto, or none
@mixin flex($values) {
  -webkit-box-flex: $values;
      -webkit-flex: $values;
  	  -ms-flex: $values;
  	      flex: $values;
}

/// Flex Flow Direction
/// - applies to: flex containers
/// @param row | row-reverse | column | column-reverse
@mixin flex-direction($direction) {
  -webkit-flex-direction: $direction;
      -ms-flex-direction: $direction;
          flex-direction: $direction;
}

/// Flex Line Wrapping
/// - applies to: flex containers
/// @param nowrap | wrap | wrap-reverse
@mixin flex-wrap($wrap) {
  -webkit-flex-wrap: $wrap;
      -ms-flex-wrap: $wrap;
          flex-wrap: $wrap;
}

/// Flex Direction and Wrap
/// - applies to: flex containers
/// @param <flex-direction> || <flex-wrap>
@mixin flex-flow($flow) {
  -webkit-flex-flow: $flow;
      -ms-flex-flow: $flow;
          flex-flow: $flow;
}

/// Display Order
/// - applies to: flex items
/// @param <integer>
@mixin order($val) {
  -webkit-box-ordinal-group: $val;  
  	     -ms-flex-order: $val;     
  	      -webkit-order: $val;  
  		      order: $val;
}

/// Flex grow factor
/// - applies to: flex items
/// @param <number>
@mixin flex-grow($grow) {
  -webkit-flex-grow: $grow;
      -ms-flex-grow: $grow;
          flex-grow: $grow;
}

/// Flex shrink
/// - applies to: flex item shrink factor
/// @param <number> 
@mixin flex-shrink($shrink) {
  -webkit-flex-shrink: $shrink;;
      -ms-flex-shrink: $shrink;
          flex-shrink: $shrink;
}

/// Flex basis
/// - the initial main size of the flex item
/// - applies to: flex itemsnitial main size of the flex item
/// @param <width> 
@mixin flex-basis($width) {
  -webkit-flex-basis: $width;
      -ms-flex-basis: $width;
          flex-basis: $width;
}

/// Axis Alignment
/// - applies to: flex containers
/// @param flex-start | flex-end | center | space-between | space-around 
@mixin justify-content($justify) {
  -webkit-justify-content: $justify;
          justify-content: $justify;
            -ms-flex-pack: $justify;
}

/// Packing Flex Lines
/// - applies to: multi-line flex containers
/// @param flex-start | flex-end | center | space-between | space-around | stretch 
@mixin align-content($align) {
  -webkit-align-content: $align;
      -ms-align-content: $align;
          align-content: $align;
}

/// Cross-axis Alignment
/// - applies to: flex containers
/// @param flex-start | flex-end | center | baseline | stretch 
@mixin align-items($align) {
  -webkit-align-items: $align;
      -ms-align-items: $align;
          align-items: $align;
}

/// Cross-axis Alignment
/// - applies to: flex items
/// @param auto | flex-start | flex-end | center | baseline | stretch 
@mixin align-self($align) {
  -webkit-align-self: $align;
      -ms-align-self: $align;
          align-self: $align;
}

/// Transitions
@mixin transitions($value: 0.2s, $ease: ease-in-out, $property: all){
	@if $ease == bezier{
		$ease: cubic-bezier(0.86, 0, 0.07, 1)
	}
	-webkit-transition: $property $value $ease;
	-moz-transition: $property $value $ease;
	-o-transition: $property $value $ease;
	transition: $property $value $ease;
}
